   clear all;clc;trai_pairs=36;out_neurons=36;hid_neurons=17;in_nodes=6400;
eata=0.1;emax=0.1;q=1;e=0;lamda=1;  t=1; %backup_1-ss-35, backp_2-a2-41, backp_3-tnr-43
tic
load trainingdata.mat k
Z=k;
d1=[1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d2=[-1 1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d3=[-1 -1 1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d4=[-1 -1 -1 1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d5=[-1 -1 -1 -1 1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d6=[-1 -1 -1 -1 -1 1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d7=[-1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d8=[-1 -1 -1 -1 -1 -1  -1 1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d9=[-1 -1 -1 -1 -1 -1  -1 -1 1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d10=[-1 -1 -1 -1 -1 -1  -1 -1 -1 1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d11=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d12=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d13=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d14=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d15=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d16=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d17=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d18=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d19=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d20=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d21=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d22=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d23=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d24=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d25=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d26=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d27=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
d28=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1];
d29=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1];
d30=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1];
d31=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1];
d32=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1];
d33=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1];
d34=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1];
d35=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1];
d36=[-1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1];


 Dm=[d1;d2;d3;d4;d5;d6;d7;d8;d9;d10;d11;d12;d13;d14;d15;d16;d17;d18;d19;d20;d21;d22;d23;d24;d25;d26;d27;d28;d29;d30;d31;d32;d33;d34;d35;d36];
D=Dm;

%step 1 initialisation of weight matrices

W=randn(out_neurons,hid_neurons);
V=randn(hid_neurons,in_nodes);
for main_loop=1:30000

% step 2 training step starts here compute layer responses

for p=1:trai_pairs
    z=transpose(Z(p,:));
    
  d=transpose(D(p,:));

   %calculate output of hidden and output layer

   y=(tansig(V*(z)));
   o=(tansig(W*(y))); 

% step 3 Error value is computed

        e=0.5*norm(d-o)^2+e;

% step 4 error signal vectors of both layers are computed
                 
                 % error signal vector for output layer
              
                 for k=1:out_neurons
                       delta_ok(k,:)=0.5*(d(k)-o(k))*(1-o(k)^2);
          end

                 %error signal vector for hidden layer

                 for j=1:hid_neurons
                        sum=0;
                 for k=1:out_neurons
                 sum=sum+delta_ok(k)*W(k,j);
                 end
                 delta_yj(j,:)=0.5*(1-y(j)^2)*sum;
          end

% step 5 Adjust weights of output and hidden layer

     W=W+eata*delta_ok*transpose(y);
     V=V+eata*delta_yj*transpose(z);
     q=q+1;                           % update step counter
 end

% step 6 training cycle is completed

fprintf('error=%f no of epcohes = %d \n',e,main_loop);
            if e>=emax
               e=0;
            else
               save backp20_2.mat W V Z;
                   break;
            end
                  
end 
save backp3.mat W V Z  
toc